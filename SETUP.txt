#################################################
## Configurando base de dados PostgreSQL
#################################################

## Instalação
sudo apt-get install postgresql
sudo /etc/init.d/postgresql start

## Criação da senha para postgres
sudo -u postgres psql postgres
\password postgres # Digite a nova senha para postgres

## Criação de usuário
sudo su - postgres
createuser -P mlpuser # Coloque NO para todas as opções que aparecerão e senha 'mlpuser'
createdb mlpdb

## Criação das tabelas
psql mlpdb -h localhost

CREATE TABLE Relation (
    RelationID SERIAL, 
    Name VARCHAR(30) NOT NULL, 
    NAttributes INTEGER NOT NULL, 
    NInstances INTEGER NOT NULL,
    
    PRIMARY KEY (RelationID),
    UNIQUE (Name)
);

CREATE TABLE Attribute (
    RelationID INTEGER, 
    AttrIndex INTEGER,
    Name VARCHAR(30),
    Type SMALLINT NOT NULL, 
    NominalCard SMALLINT,
    Minimum NUMERIC,
    Maximum NUMERIC,
    
    CHECK (Type IN (1, 2)),
    PRIMARY KEY (RelationID, AttrIndex),
    UNIQUE (RelationID, Name),
    FOREIGN KEY (RelationID) REFERENCES Relation (RelationID)
);

CREATE TABLE Nominal (
    RelationID INTEGER,
    AttrIndex INTEGER,
    NominalIndex SMALLINT,
    Name VARCHAR(30) NOT NULL,
    
    PRIMARY KEY (RelationID, AttrIndex, NominalIndex),
    FOREIGN KEY (RelationID, AttrIndex) REFERENCES Attribute (RelationID, AttrIndex)
);

CREATE TABLE Data (
    RelationID INTEGER,
    InstanceIndex INTEGER,
    AttrIndex INTEGER,
    NumericValue NUMERIC,
    NominalValue SMALLINT,
    
    PRIMARY KEY (RelationID, InstanceIndex, AttrIndex),
    FOREIGN KEY (RelationID, AttrIndex) REFERENCES Attribute (RelationID, AttrIndex)
);

CREATE TABLE MLP (
	MLPID SERIAL,
	Name VARCHAR(30),
	LowerValue NUMERIC NOT NULL,
	UpperValue NUMERIC NOT NULL,
	NLayers INTEGER NOT NULL,
	TrainedRelation INTEGER,
	
	PRIMARY KEY (MLPID),
	FOREIGN KEY (TrainedRelation) REFERENCES Relation (RelationID),
	UNIQUE (Name)
);

CREATE TABLE Layer (
	MLPID INTEGER,
	LayerIndex INTEGER,
	NInputs INTEGER NOT NULL,
	NNeurons INTEGER NOT NULL,
	
	PRIMARY KEY (MLPID, LayerIndex),
	FOREIGN KEY (MLPID) REFERENCES MLP (MLPID)
);

CREATE TABLE Neuron (
	MLPID INTEGER,
	LayerIndex INTEGER,
	NeuronIndex INTEGER,
	InputIndex INTEGER,
	Weight NUMERIC NOT NULL,
	
	PRIMARY KEY (MLPID, LayerIndex, NeuronIndex, InputIndex),
	FOREIGN KEY (MLPID, LayerIndex) REFERENCES Layer (MLPID, LayerIndex)
);

CREATE TABLE Operation (
	OperationID SERIAL,
	Type SMALLINT,
	MLPID INTEGER,
	RelationID INTEGER NOT NULL,
	LearningRate NUMERIC,
	Tolerance NUMERIC,
	MaxEpochs INTEGER,
	Error NUMERIC,
	Epochs INTEGER,
	Time NUMERIC,
	
	CHECK (Type IN (1, 2, 3)),
	PRIMARY KEY (OperationID),
	FOREIGN KEY (MLPID) REFERENCES MLP (MLPID),
	FOREIGN KEY (RelationID) REFERENCES Relation (RelationID)
);

CREATE TABLE Result (
	OperationID INTEGER,
    InstanceIndex INTEGER,
    NumericValue NUMERIC,
    NominalValue SMALLINT,
    
    PRIMARY KEY (OperationID, InstanceIndex),
    FOREIGN KEY (OperationID) REFERENCES Operation (OperationID)
);

## Doação de privilégios
GRANT SELECT, INSERT, UPDATE, DELETE ON Relation TO mlpuser;
GRANT SELECT, INSERT, UPDATE, DELETE ON Attribute TO mlpuser;
GRANT SELECT, INSERT, UPDATE, DELETE ON Nominal TO mlpuser;
GRANT SELECT, INSERT, UPDATE, DELETE ON Data TO mlpuser;
GRANT SELECT, INSERT, UPDATE, DELETE ON MLP TO mlpuser;
GRANT SELECT, INSERT, UPDATE, DELETE ON Layer TO mlpuser;
GRANT SELECT, INSERT, UPDATE, DELETE ON Neuron TO mlpuser;
GRANT SELECT, INSERT, UPDATE, DELETE ON Operation TO mlpuser;
GRANT SELECT, INSERT, UPDATE, DELETE ON Result TO mlpuser;


GRANT SELECT, UPDATE, USAGE ON relation_relationid_seq TO mlpuser;
GRANT SELECT, UPDATE, USAGE ON mlp_mlpid_seq TO mlpuser;
GRANT SELECT, UPDATE, USAGE ON operation_operationid_seq TO mlpuser;

